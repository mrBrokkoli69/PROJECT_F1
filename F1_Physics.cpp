#include "F1_Physics.h"
#include <cmath>
#include <algorithm>

// === –ö–û–ù–°–¢–†–£–ö–¢–û–† –ò –°–ë–†–û–° ===

F1PhysicsEngine::F1PhysicsEngine() {
    reset();
}

void F1PhysicsEngine::reset() {
    current_state = CarState();  // –û–±–Ω—É–ª—è–µ–º –≤—Å—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    calculateWheelPositions();   // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–æ–ª–µ—Å
}

// === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

void F1PhysicsEngine::update(double dt, bool gas_pedal, bool brake_pedal, double steering) {
    // 1. –î–≤–∏–≥–∞—Ç–µ–ª—å
    calculateEnginePhysics(gas_pedal, dt);
    
    // 2. –°–∏–ª—ã
    calculateForces(gas_pedal, brake_pedal, steering);
    
    // 3. –î–≤–∏–∂–µ–Ω–∏–µ
    integrateMotion(dt);
    
    // 4. –ì–µ–æ–º–µ—Ç—Ä–∏—è
    calculateWheelPositions();
}


// === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ –†–ê–°–ß–ï–¢–ê ===

void F1PhysicsEngine::calculateEnginePhysics(bool gas_pedal, double dt) {

}

void F1PhysicsEngine::calculateWheelPositions() {
    double half_wheelbase = params.wheelbase / 2.0;
    double half_track = params.track_width / 2.0;
    
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º –∫–æ–ª–µ—Å–∞ –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—Ç—Ä–∞ (–±–µ–∑ —É—á–µ—Ç–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞)
    current_state.wheel_positions[0] = {  // FL (–ø–µ—Ä–µ–¥–Ω–µ–µ –ª–µ–≤–æ–µ)
        current_state.position.x + half_wheelbase,
        current_state.position.y + half_track
    };
    
    current_state.wheel_positions[1] = {  // FR (–ø–µ—Ä–µ–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ)
        current_state.position.x + half_wheelbase, 
        current_state.position.y - half_track
    };
    
    current_state.wheel_positions[2] = {  // RL (–∑–∞–¥–Ω–µ–µ –ª–µ–≤–æ–µ)
        current_state.position.x - half_wheelbase,
        current_state.position.y + half_track
    };
    
    current_state.wheel_positions[3] = {  // RR (–∑–∞–¥–Ω–µ–µ –ø—Ä–∞–≤–æ–µ)
        current_state.position.x - half_wheelbase,
        current_state.position.y - half_track
    };
}

// === –ó–ê–ì–õ–£–®–ö–ò - —Ä–µ–∞–ª–∏–∑—É–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö ===

void F1PhysicsEngine::calculateForces(bool gas_pedal, bool brake_pedal, double steering) {
    // 1. –°–ò–õ–ê –¢–Ø–ì–ò (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–æ–º –≥–∞–∑–µ)
    current_state.traction_force = gas_pedal ? calculateTractionForce() : 0.0;
    
    // 2. –°–û–ü–†–û–¢–ò–í–õ–ï–ù–ò–ï –í–û–ó–î–£–•–ê (–≤—Å–µ–≥–¥–∞ –ø—Ä–æ—Ç–∏–≤ –¥–≤–∏–∂–µ–Ω–∏—è)
    current_state.drag_force = calculateDragForce();
    
    // 3. –°–ò–õ–ê –¢–û–†–ú–û–ñ–ï–ù–ò–Ø (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–æ–º —Ç–æ—Ä–º–æ–∑–µ)
    current_state.brake_force = brake_pedal ? calculateBrakeForce() : 0.0;
    
    // 4. –ü–†–ò–ñ–ò–ú–ù–ê–Ø –°–ò–õ–ê (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è - –ø–æ–∫–∞ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ 1D –¥–≤–∏–∂–µ–Ω–∏–µ)
    current_state.down_force = calculateDownForce();
    
    // üí° –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: steering –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è 1D –¥–≤–∏–∂–µ–Ω–∏—è
}

double F1PhysicsEngine::calculateTractionForce() const {
    // –¢–æ, —á—Ç–æ —Å—é–¥–∞ –¥–æ–ª–∂–µ–Ω —Å–∞–Ω—è —Å–∫–∏–Ω—É—Ç—å 
    double traction_force = 1;
    double max_traction = params.tire_friction * (params.mass * 9.81 + current_state.down_force);
    
    // –ù–µ –¥–∞–µ–º —Å–∏–ª–µ —Ç—è–≥–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç—å —Å–∏–ª—É —Å—Ü–µ–ø–ª–µ–Ω–∏—è
    return std::min(traction_force, max_traction);


}

double F1PhysicsEngine::calculateDragForce() const {
   
    // –§–æ—Ä–º—É–ª–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è –≤–æ–∑–¥—É—Ö–∞: F_drag = -0.5 * œÅ * v¬≤ * C_d * A
    
    double drag_force = -0.5 * params.air_density * 
                       current_state.speed * std::abs(current_state.speed) *
                       params.drag_coefficient * params.frontal_area;
    
    return drag_force;
   
}
double F1PhysicsEngine::calculateDownForce() const {
    // –§–æ—Ä–º—É–ª–∞ –ø—Ä–∏–∂–∏–º–Ω–æ–π —Å–∏–ª—ã: F_down = 0.5 * œÅ * v¬≤ * C_l * A
    // –î–ª—è F1 C_l ‚âà -3.0 (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π = –ø—Ä–∏–∂–∏–º–Ω–∞—è —Å–∏–ª–∞)
    
  
    
    double down_force = 0.5 * params.air_density * 
                       current_state.speed * std::abs(current_state.speed) *
                       params.downforce_coefficient * params.frontal_area;
    
    // –ü—Ä–∏–∂–∏–º–Ω–∞—è —Å–∏–ª–∞ –≤—Å–µ–≥–¥–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è (–≤–Ω–∏–∑)
    return down_force;
}
double F1PhysicsEngine::calculateBrakeForce() const {
    //–°–∞–Ω—è –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å
    double brake_force = 1;
    return brake_force;
}

void F1PhysicsEngine::integrateMotion(double dt) {
    // 1. –°–£–ú–ú–ò–†–£–ï–ú –í–°–ï –°–ò–õ–´ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–æ–ª—å–Ω—ã–µ –¥–ª—è 1D)
    double total_force = current_state.traction_force + 
                        current_state.drag_force + 
                        current_state.brake_force;
    
    // 2. –í–¢–û–†–û–ô –ó–ê–ö–û–ù –ù–¨–Æ–¢–û–ù–ê: F = m √ó a
    current_state.acceleration.x = total_force / params.mass;
    current_state.acceleration.y = 0.0;  // –ü–æ–∫–∞ –Ω–µ—Ç –±–æ–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    
    // 3. –ò–ù–¢–ï–ì–†–ò–†–£–ï–ú –£–°–ö–û–†–ï–ù–ò–ï ‚Üí –°–ö–û–†–û–°–¢–¨ (–º–µ—Ç–æ–¥ –≠–π–ª–µ—Ä–∞)
    current_state.velocity.x += current_state.acceleration.x * dt;
    
    // 4. –ò–ù–¢–ï–ì–†–ò–†–£–ï–ú –°–ö–û–†–û–°–¢–¨ ‚Üí –ü–û–ó–ò–¶–ò–Ø
    current_state.position.x += current_state.velocity.x * dt;
    
    // 5. –†–ê–°–ß–ï–¢ –ú–û–î–£–õ–Ø –°–ö–û–†–û–°–¢–ò
    current_state.speed = std::sqrt(current_state.velocity.x * current_state.velocity.x + 
                                   current_state.velocity.y * current_state.velocity.y);
    
    // 6. –ó–ê–©–ò–¢–ê –û–¢ –û–¢–†–ò–¶–ê–¢–ï–õ–¨–ù–û–ô –°–ö–û–†–û–°–¢–ò
    if (current_state.velocity.x < 0 && current_state.brake_force == 0) {
        current_state.velocity.x = 0;
        current_state.speed = 0;
    }
}